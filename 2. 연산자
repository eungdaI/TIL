연산자(Operator)

- 연산자
	-연산의 사전적 의미 - 규칙에 따라 계산하여 값을 구함	-	js는 사전적의미와 같기도 틀리기도 한다.
- 연산자(Operator)형태
	-	+ ,- ,* ,/, %
	-	>, >=, <, <=
	-	==, !=, ===, !==
	-	콤마(,), typeof, delete, void
	-	instanceof, in, new 등

- 표현식(Expression) 형태
	- 1+2
	- var total = 1 + 2;				-	표현식을 평가한다.		-평가결과 : 3
	- var value = total / (2+3);			
	- 표현식을 평가하면 결과가 반환된다. 이를 평가 결과라고 한다.

-할당 연산자
	- 단일 할당 연산자	==하나만 사용
		-var result = 1 + 2;
	
	- 복합 할당 연산자 == 앞에 연산자 작성
		-	+=, -+, *=, /=, %=
		-	<<=, >>=
		-	>>>=, &=, ^=, ㅣ=
	- 먼저 = 앞을 연산한 후 , 할당
		-  var point =7; / point += 3; / 포인트 7값에 3을더해서 평가결과 값 10을 반환

- 해석, 실행 순서
	- 해석이란? 
		-js코드를 기계어로 바꾸는 것. 	== compile
		-"엔진(Engine)이 해석하고 실행한다."라고 합니다.
	- 실행 순서
		-var resule = 1 + 2 +6;
		- = 왼쪽의 표현식 평가
		- = 오른쪽의 표현식 평가 , 왼쪽에서 오른쪽으로 평가(1+2, 3+6)
		- = 오른쪽에서 표현식의 평가 결과를 왼쪽 표현식 평가 결과에 할당 
- 산술 연산자
	+ 연산자		- 양쪽 결과를 더함
		- 평가 결과 연결
			-한 쪽이라도 숫자가 아니면 연결	-	최대한 오류가 안나게 하기위한 것
				var two = "2"; / var vlaue = 1 + two; / log(value); ==12 / log(typeof value)l; ==string
		- 왼쪽에서 오른쪽으로 연산
			-	1 + 5 + "ABC"   		== 6ABC

	- 숫자로 변환
		- 연산하기 전에 우선 숫자로 변환
		- 변환된 값으로 연산 
                 - 값 타입	 Undefined    Null	  Boolean		Number		  String	
                 - 변환 값	    NaN	      +0	 true:1, false:0	변환 전/후 같음   값이 숫자면 숫자로연산 단 더하기는 연결
		        (=Not a Number)
			log (10 + U)  log(10 + Null)  log(10 + true or false)     log(10 + "123" / 123 - 23)
		         =  NaN	      =10                     =11        =10            =10123       =100
	- 연산자
		-왼쪽 표현식 평가 결과에서 오른쪽 표현식 평가 결과를 뺍니다
		- String타입이지만, 값이 숫자이면 Number 타입으로 변환하여 계산 log("135" - 2); = 133

	* 연산자
		-왼쪽 표현식 평가결과와 오른쪽 표현식 평가 결과를 곱한다. 
		- 숫자 값으로 변환할 수 있으면 변환하여 곱한다.
		- NaN 반환
			- 양쪽의 평가 결과가 하나라도 숫자가 아니면 NaN 반한
		- 소수 값이 생기는 경우 처리
			-2.3*3은 6.899995로 나온다. IEEE 754유동 소수점 처리 때문
	/ 연산자 	
		-왼쪽 표현식 평가 결과를 오른쪽 표현식 평가 결과로 나눕니다.
		- NaN 반환	
			- 양쪽의 평가 결과가 하나라도 숫자가 아닐때
			- 분모 , 분자가 모두 0 일 때
		-분모, 분자가 0 일 때
			-분모가 0이면 Infinity  반환
			- 분자가 0이면 0 반환
	% 연산자
		-왼쪽 표현식 평가 결과를 오른쪽 표현식 평가 결과로 나누어 나머지를 구한다.
		- 3 % 2의 나머지는 1	log(5 % 2.5); : 0 / log(5 % 2.3); : 0.4000000036 IEEE754 유동소수점 처리때문

- 단항 + 연산자
	- 형태: +value
	- 값을 Number 타입으로 변환
	- 코드 가독성
		- 			+를 더하기로 착각할 수도 있음
		- Number()도 똑같은 기능이다.
		- log(typeof value); == log(typeof +value); == log(typeof Numver(value));

- 단할 - 연산자
	- 형태 : -value
	- 값의 부호를 바꿈		/  +는 -로, -는 +로 바꿈
	- 연산할 때만 바꿈
		- 원래 값은 바뀌지 않음
		- var value = 7;		log(-value); = -7	/   log(8 + -value); ==1  /  log(value); ==7

- 후치 ++연산자
	-형태 : value++
	-값을 자동으로  1 증가시킴
		-문장을 수행한 후에 1 증가
		- 즉, 세미로콜론(;) 다음에서 증가
		- var one =1;	var value = one++ + 3;	log(value); ==4 /  log(value); ==2

- 전치 ++ 연산자
	- 형태 : ++value
	- 값을 자동으로 1 증가시킴
		-문장 안에서 1 증가
		-표현식을 평가하기 전에 1증가 / 표현식에서 증가된 값을 사용
		- var one =1;	var value = ++one + 3	  log(value); == 5

-후치 -- 연산자
	- 형태 : value--
	- 값을 자동으로 1감소시킴 
		-문장을 수행한 후에 1 감소 / 즉 세미콜론(;) 다음에 감소

-전치 --연산자
	- 형태 : --value
	- 값을 자동으로 1 감소시킴
		-문장 안에서 1 감소
		- 표현식에서 감소된 값을 사용

-!연산자
	-논리(Logical) NOT 연산자
	- 형태 : !value
	- 표현식 평가 결과를 true, false로 변환한 후 true이면 false를, false이면 true를 반환
	- 월래 값은 바뀌지 않으며 사용할 때만 변환

- 유니코드
	- 세계의 모든 문자를 통합하여 코드화
	- 언어, 이모티콘 등등
	- 코드 갑을 코드 포인트(code point)라고 부름
	- 0000~FFFF, 10000 ~ 1FFFF값에 문자 매핑
	- 표기 방법
		-u와 숫자 형태 : u0031은 숫자 1
		-js는 u앞에 역슬래쉬(\)작성
		-역슬래시(\)를 문자로 표시하려면 역슬래시(\\)2개 작성
		- ES6에서 표기 방법이 추가됨

- UTF ( Unicode Transformation Format)
	- 유니코드의 코드 포인트를 매핑하는 방법
	- UTF-8, UTF-16, UTF-32로 표기
	- <meta charset="utf-8">
	- UTF-8은 8비트로 코드 포인트 매핑
	- 8비트 인코딩(Encoding)이라고 부름

- 관계 연산자 (Relational)
	-<, >, <=, >=연산자
	- instanceof 연산자
	- in연산자
	
	-instanceof, in 연산자	
		-사전 설명이 필요하므로 관련된 곳에서 다룬다

- >연산자
	- 부등호 : Greater - than
	- 양쪽이 Number 타입일 때, 왼쪽이 오른쪽보다 크면 true반환, 아니면 false 반환
	
	-string타입 비교		
		- 한 쪽이 String 타입이면 false
		- 양쪽이 모두 String타입이면 유니코드사전 순서로 비교
		- 문자 하나씩 비교 			-왼쪽에서 오른쪽으로, 결정이되면 다음 것은 비교하지 않는다.
		- <, <=, >=는 비교 기준만 다름
		
- 동등 , 부등, 일치, 불일치, 연산자

-동등(==) 연산자
	-왼쪽과 오른쪽이 값이 같으면 true  / 다르면 false
	- 값 타입은 비교하지 않음 / 1과 "1"이 같음 	log(1) == log("1") / 
	- {var value;  / log(value == undefined); =>true } , {var vlaue; / log(value == null);  => true } 
		-undefined와 null 값이 다른데도 true가 되니 생각하자

- 부등(!=) 연산자
	- 왼쪽과 오른쪽이 값이 다르면 true, 같으면 false
	- a != b와 !(a == b)가 같음

- 일치(===) 연산자
	- 왼쪽과 오른쪽이 값과 타입이 모두 같으면 true
	- 값 또는 타입이 다르면 false
	- 1 ===1, true  		/ 1=== "1", false	타입이다르다
**삽질주의**	- var value; / log(value ==null);  => true   //	log(value === null);  => false    타입이 다름 

- 불일치(!==) 연산자
	-값 또는 타입이 다르면 true , true가 아니면 false

- 콤마(, Comma) 연산자
	-콤마로 표현식을 분리
		- var a =1, b = 2
		- 한 번만 var 작성

- 그룹핑(()) 연산자
	-소괄호() 안의 표현식을 먼저 평가
		-평가한 값을 반환			5/ (2 + 3)

- 논리 or(||) 연산자			키보드로 shift + \  
	-표현식의 평가 결과가 하나라도 true이면 true 아니면 false,		전부 false면 undefined 반환
	- 왼쪽 결과가  true이면 오른쪽은 비교하지 않음
	코드1	-var value , zero = 0, two = 2;		- log(value || zero || two);	 => 2
			- value는 undefined, zero는 0, two는 2이다 
**삽질주의**			- 불리언에서 nudefined와 0은 false를 반환하다. value랑 zero는 false, two는 true
				- 논리or연산자는 결과가 true값이 나온 변수의  값을 반환한다.
	코드2	- var value, zero = 0;	-log(zero || value);  	
			- 둘 다 false일 때 undefined를 반환한다.	false를 반환하지 않는다.
	코드3	- var =1;		log(one === 1  || two ===2);	true반환
주의~			-one부분에서 이미 true가 나와서 two는 비교하지 않는다.  

-논리(&&)AND 연산자
	- 표현식의 평가 결과가 모두 true이면 true, 아니면 false
	- 왼쪽 결과가  false이면 오른쪽은 비교하지 않음
	코드 1	- var one = 1,  two = 2; 		log(one && two);  => 2를 반환		
			- 모두가 true이면 마지막 값(위의 코드는 2)를 반환
	코드 2	- var one = 1 , zero = 0;	log(one && zero && nine);  => 0을 반환
			- false가 뜨면 false뜬 값(위의 코드는 0/ 불리언에서 0은 false다)을 반환 

조건 연산자, 연산자 우선순위
-조건 연산자
	- 기호 : exp? exp-1 : exp-2		==항이 3개라 3항연산자 라고도 한다.
	- exp 위치의 표현식을 먼저 평가
		-true이면 exp-1의 결과 반환
		-false이면 exp-2의 결과 반환
	코드1	- log(1 === 1 ? "같음" : "다름");		=> 같음 반환
		- log(1 === "1" ? "같음" : "다름");		=> 다름

-연산자의 실행 우선순위	-MDN Operator precedence사이트를 찾아가서 보자
	-MDN 사이트랑 친해지자